name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build all targets
      run: ./gradlew buildAll

    - name: Run tests
      run: ./gradlew test

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: salt-installer-linux
        path: build/bin/linux/releaseExecutable/salt-installer-linux.kexe

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: salt-installer-windows
        path: build/bin/windows/releaseExecutable/salt-installer-windows.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux artifact
      uses: actions/download-artifact@v3
      with:
        name: salt-installer-linux
        path: ./artifacts/linux/

    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: salt-installer-windows
        path: ./artifacts/windows/

    - name: Create release package
      run: |
        mkdir -p release
        cp artifacts/linux/salt-installer-linux.kexe release/
        cp artifacts/windows/salt-installer-windows.exe release/
        cp README.md release/
        cp LICENSE release/
        
        # Create platform-specific packages
        tar -czf salt-installer-linux-${{ github.ref_name }}.tar.gz -C artifacts/linux salt-installer-linux.kexe
        zip salt-installer-windows-${{ github.ref_name }}.zip artifacts/windows/salt-installer-windows.exe
        
        # Create combined package
        tar -czf salt-installer-all-platforms-${{ github.ref_name }}.tar.gz -C release .

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          salt-installer-linux-${{ github.ref_name }}.tar.gz
          salt-installer-windows-${{ github.ref_name }}.zip
          salt-installer-all-platforms-${{ github.ref_name }}.tar.gz
        body: |
          ## Salt-Minion Universal Installer ${{ github.ref_name }}
          
          ### Download
          
          #### Platform-specific downloads:
          - **Linux**: `salt-installer-linux-${{ github.ref_name }}.tar.gz`
          - **Windows**: `salt-installer-windows-${{ github.ref_name }}.zip`
          
          #### All platforms:
          - **Combined package**: `salt-installer-all-platforms-${{ github.ref_name }}.tar.gz`
          
          ### Usage
          
          #### Linux:
          ```bash
          # Extract and make executable
          tar -xzf salt-installer-linux-${{ github.ref_name }}.tar.gz
          chmod +x salt-installer-linux.kexe
          
          # Run installer
          sudo ./salt-installer-linux.kexe
          
          # Or with options
          sudo ./salt-installer-linux.kexe --silent --master 192.168.1.100
          ```
          
          #### Windows:
          ```cmd
          # Extract and run as administrator
          salt-installer-windows.exe
          
          # Or with options
          salt-installer-windows.exe --silent --master 192.168.1.100
          ```
          
          ### Features
          - ‚úÖ Interactive installation mode
          - ‚úÖ Silent installation mode
          - ‚úÖ Automatic platform detection
          - ‚úÖ Salt Master connectivity validation
          - ‚úÖ Service management
          - ‚úÖ Configuration backup
          - ‚úÖ Uninstallation support
          
          ### Full Changelog
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  nightly:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux artifact
      uses: actions/download-artifact@v3
      with:
        name: salt-installer-linux
        path: ./artifacts/linux/

    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: salt-installer-windows
        path: ./artifacts/windows/

    - name: Create nightly release
      run: |
        DATE=$(date +'%Y%m%d')
        COMMIT_SHA=${GITHUB_SHA:0:7}
        
        # Create nightly packages
        tar -czf salt-installer-linux-nightly-${DATE}-${COMMIT_SHA}.tar.gz -C artifacts/linux salt-installer-linux.kexe
        zip salt-installer-windows-nightly-${DATE}-${COMMIT_SHA}.zip artifacts/windows/salt-installer-windows.exe

    - name: Update nightly release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly
        name: "Nightly Build"
        files: |
          salt-installer-linux-nightly-*.tar.gz
          salt-installer-windows-nightly-*.zip
        body: |
          ## üåô Nightly Build
          
          **‚ö†Ô∏è This is an automated nightly build from the latest main branch.**
          
          **Build Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
          **Commit**: ${{ github.sha }}
          
          ### Downloads
          - **Linux**: `salt-installer-linux-nightly-*.tar.gz`
          - **Windows**: `salt-installer-windows-nightly-*.zip`
          
          ### ‚ö†Ô∏è Important Notes
          - These are development builds and may contain bugs
          - Use at your own risk in production environments
          - For stable releases, use tagged versions instead

        draft: false
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}